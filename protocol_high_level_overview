       This file is part of SecureDataSocket
	   Copyright (C) 2017 Jakob Bode and Matthias Sekul

	   SecureDataSocket is free software: you can redistribute it and/or modify
	   it under the terms of the GNU General Public License as published by
	   the Free Software Foundation, either version 3 of the License, or
	   (at your option) any later version.

	   SecureDataSocket is distributed in the hope that it will be useful,
	   but WITHOUT ANY WARRANTY; without even the implied warranty of
	   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	   GNU General Public License for more details.

	   You should have received a copy of the GNU General Public License
	   along with SecureDataSocket.  If not, see <http://www.gnu.org/licenses/>

Let H be a collision resistent hash function (e.g. SHA-512 is collision resistent for 256 bits (32 byte)) and h a two universal hash function (e.g. h := Ax + B).
Let g be a HMac function with security parameter (0,1)^k. Notation: g(x,m) is the tag t for message m with security parameter x.

Commitment scheme:
Let c be the commitment and d be the decommitment:


A <- (0,1)^n
x <- (0,1)^n
m <- (0,1)^n
h:=Az + B (mod n)
B:= m - Ax
c:=<H(x),A,B,g(x,(H(x)||A||B))>

Decommiment:
d:=<x>



Protocol:
Setup:

Alice:
create <c_A,d_A> with random A,x and message m
Bob:
create <c_B,d_B> with random A,x and message m

Alice ----------- "Ready" ---------> Bob
Alice <---------- "ACK" ------------ Bob
Alice <---------- "Ready" ---------- Bob
Alice ----------- "ACK" -----------> Bob

Commitmentexchange:

Alice ----------- c_A -------------> Bob
Alice <---------- c_B -------------- Bob
Alice ----------- d_A -------------> Bob
Alice <---------- d_B -------------- Bob


When Channel MANUAL is used, the sharedSecret is transported via a Out-Of-Bounds-channel (e.g. visual). i.e. the sharedSecret is known by the client and the server, when the network-connection is setup.
To verify, if both devices are able to read, what the other sends (verify they use the same sharedSecret), a check is performed

Server: create randomNumberA
Server ------ randomNumberA -------> Client
Server <----- randomNumberA+1 ------ Client

Client: create randomNumberB
Server <----- randomNumberB -------- Client
Server ------ randomNumberB+1 -----> Client

After this exchange the numbers are compared with the expected results. If a unexpected result was received the connection is closed.
Since the AES-128, used in for the encryption, uses a MAC only one check (randomNumberA or randomNumberB) should be enough. We used both.
